@model HomeworkAssignment1.Models.Driver

@{
    ViewBag.Title = "Edit Driver";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-4">
    <h2>Edit Driver</h2>
    <hr />

    @using (Html.BeginForm("SaveDriver", "Booking", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.driverID)
        @Html.Hidden("isFromLocalStorage", Model.isFromLocalStorage)

        <div class="form-group row">
            @Html.LabelFor(model => model.driverFirstName, htmlAttributes: new { @class = "col-md-2 col-form-label" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.driverFirstName, new { htmlAttributes = new { @class = "form-control", @id = "driverFirstName" } })
                @Html.ValidationMessageFor(model => model.driverFirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.driverLastName, htmlAttributes: new { @class = "col-md-2 col-form-label" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.driverLastName, new { htmlAttributes = new { @class = "form-control", @id = "driverLastName" } })
                @Html.ValidationMessageFor(model => model.driverLastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.driverPhoneNumber, htmlAttributes: new { @class = "col-md-2 col-form-label" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.driverPhoneNumber, new { htmlAttributes = new { @class = "form-control", @id = "driverPhoneNumber" } })
                @Html.ValidationMessageFor(model => model.driverPhoneNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.driverServiceType, htmlAttributes: new { @class = "col-md-2 col-form-label" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.driverServiceType,
                    new SelectList(HomeworkAssignment1.Models.Services.serviceTypes),
                    "Select Service Type",
                    new { @class = "form-control", @id = "driverServiceType" })
                @Html.ValidationMessageFor(model => model.driverServiceType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.driverImage, "Driver Image URL", htmlAttributes: new { @class = "col-md-2 col-form-label" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.driverImage, new { htmlAttributes = new { @class = "form-control", @id = "driverImage" } })
                @Html.ValidationMessageFor(model => model.driverImage, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            <div class="col-md-offset-2 col-md-10">
                <button type="submit" class="btn btn-primary">Save Changes</button>
                <a href="@Url.Action("ManagePage")" class="btn btn-secondary">Cancel</a>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Add phone number formatting if inputmask is available
            if (typeof $.fn.inputmask !== 'undefined') {
                $('#driverPhoneNumber').inputmask('(999) 999-9999');
            }

            // For localStorage drivers, load data from localStorage
            @if (Model.isFromLocalStorage)
            {
                <text>
                var driverId = '@Model.driverID';
                var driverData = localStorage.getItem('driver_' + driverId);

                console.log('Loading localStorage driver:', driverId, driverData); // Debug log

                if (driverData) {
                    var fields = driverData.split('|');
                    if (fields.length >= 4) {
                        $('#driverFirstName').val(fields[0]);
                        $('#driverLastName').val(fields[1]);
                        $('#driverPhoneNumber').val(fields[2]);
                        $('#driverServiceType').val(fields[3]);

                        // Load image if available
                        if (fields.length > 4 && fields[4]) {
                            $('#driverImage').val(fields[4]);
                        }
                    }
                } else {
                    console.error('No localStorage data found for driver:', driverId);
                    alert('Driver data not found in localStorage. Redirecting to manage page.');
                    window.location.href = '@Url.Action("ManagePage", "Booking")';
                }
                </text>
            }

            // Form validation
            $('form').on('submit', function(e) {
                var isValid = true;
                var firstName = $('#driverFirstName').val().trim();
                var lastName = $('#driverLastName').val().trim();
                var phone = $('#driverPhoneNumber').val().trim();
                var serviceType = $('#driverServiceType').val();

                // Clear previous validation messages
                $('.text-danger').empty();

                if (!firstName) {
                    $('#driverFirstName').next('.text-danger').text('First name is required');
                    isValid = false;
                }

                if (!lastName) {
                    $('#driverLastName').next('.text-danger').text('Last name is required');
                    isValid = false;
                }

                if (!phone) {
                    $('#driverPhoneNumber').next('.text-danger').text('Phone number is required');
                    isValid = false;
                }

                if (!serviceType) {
                    $('#driverServiceType').next('.text-danger').text('Service type is required');
                    isValid = false;
                }

                if (!isValid) {
                    e.preventDefault();
                    return false;
                }

                return true;
            });
        });
    </script>
}