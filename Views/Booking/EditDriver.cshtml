@model HomeworkAssignment1.Models.Driver

@{
    ViewBag.Title = "Edit Driver";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-4">
    <h2>Edit Driver</h2>
    <hr />

    @using (Html.BeginForm("SaveDriver", "Booking", FormMethod.Post, new { @class = "form-horizontal", role = "form", enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.driverID)
        @Html.Hidden("isFromLocalStorage", Model.isFromLocalStorage)

        <div class="form-group row">
            @Html.LabelFor(model => model.driverFirstName, htmlAttributes: new { @class = "col-md-2 col-form-label" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.driverFirstName, new { htmlAttributes = new { @class = "form-control", id = "driverFirstName" } })
                @Html.ValidationMessageFor(model => model.driverFirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.driverLastName, htmlAttributes: new { @class = "col-md-2 col-form-label" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.driverLastName, new { htmlAttributes = new { @class = "form-control", id = "driverLastName" } })
                @Html.ValidationMessageFor(model => model.driverLastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.driverPhoneNumber, htmlAttributes: new { @class = "col-md-2 col-form-label" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.driverPhoneNumber, new { htmlAttributes = new { @class = "form-control", id = "driverPhoneNumber" } })
                @Html.ValidationMessageFor(model => model.driverPhoneNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.driverServiceType, htmlAttributes: new { @class = "col-md-2 col-form-label" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.driverServiceType,
                    new SelectList(HomeworkAssignment1.Models.Services.serviceTypes),
                    "Select Service Type",
                    new { @class = "form-control", id = "driverServiceType" })
                @Html.ValidationMessageFor(model => model.driverServiceType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.driverImage, "Driver Image", htmlAttributes: new { @class = "col-md-2 col-form-label" })
            <div class="col-md-10">
                <input type="file" id="driverImageFile" class="form-control-file" accept="image/*">
                @Html.HiddenFor(model => model.driverImage, new { id = "driverImage" })
                <div id="imagePreview" class="mt-2" style="max-width: 150px;"></div>
                @Html.ValidationMessageFor(model => model.driverImage, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            <div class="col-md-offset-2 col-md-10">
                <button type="submit" class="btn btn-primary">Save Changes</button>
                <a href="@Url.Action("ManagePage")" class="btn btn-secondary">Cancel</a>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Phone number masking
            $('#driverPhoneNumber').inputmask('(999) 999-9999');

            // Image preview and conversion
            $('#driverImageFile').change(function() {
                const file = this.files[0];
                if (file) {
                    if (file.size > 500000) { // 500KB limit
                        alert('Image size should be less than 500KB');
                        $(this).val('');
                        return;
                    }

                    const reader = new FileReader();
                    reader.onload = function(e) {
                        // Display preview
                        $('#imagePreview').html(`<img src="${e.target.result}" class="img-thumbnail" />`);
                        // Store base64 in hidden field
                        $('#driverImage').val(e.target.result);
                    }
                    reader.readAsDataURL(file);
                }
            });

            // Load driver data from localStorage if it's a localStorage driver
            @if (Model.isFromLocalStorage)
            {
                <text>
                var driverData = localStorage.getItem('driver_' + '@Model.driverID');
                if (driverData) {
                    var fields = driverData.split('|');
                    $('#driverFirstName').val(fields[0]);
                    $('#driverLastName').val(fields[1]);
                    $('#driverPhoneNumber').val(fields[2]);
                    $('#driverServiceType').val(fields[3]);

                    // Load image if available
                    if (fields.length > 4 && fields[4]) {
                        $('#imagePreview').html(`<img src="${fields[4]}" class="img-thumbnail" />`);
                        $('#driverImage').val(fields[4]);
                    }
                }
                </text>
            }
        });
    </script>
}