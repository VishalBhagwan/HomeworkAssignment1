@{
    ViewBag.Title = "HomePage";
}

<div class="jumbotron">
    <h1>RescueBus</h1>
    <p class="lead">you're better off not dead</p>
</div>

<div class="row">
    <div class="col-md-12 text-center">
        <h2>A real O.K. team here to try and save you</h2>
        <p>If you're still breathing once you've reached the hospital, we've done our job successfully!</p>
        <a href="@Url.Action("SelectService", "Booking")" class="btn btn-primary">Book Ambulance</a>
    </div>
</div>

<div class="row mt-5">
    <div class="col-md-12 text-center">
        <h3>EMERGENCY?</h3>
        <p>Only hit the button for <strong>real</strong> emergencies mind you...</p>
        <button id="sosButton" class="btn btn-danger btn-lg">S.O.S</button>
    </div>
</div>

@section scripts {
    <script>
        $(document).ready(function () {
            // S.O.S button click handler
            $("#sosButton").click(function(e) {
                e.preventDefault();

                // Get service types from server
                const serviceTypes = [
                    @foreach (var service in HomeworkAssignment1.Models.Services.serviceTypes)
                    {
                        <text>'@service',</text>
                    }
                ];

                // Get drivers from repository
                const repoDrivers = [
                    @foreach (var driver in HomeworkAssignment1.Models.Repository.GetDrivers())
                    {
                        <text>
                        {
                            driverID: '@driver.driverID',
                            firstName: '@driver.driverFirstName',
                            lastName: '@driver.driverLastName',
                            phone: '@driver.driverPhoneNumber',
                            serviceType: '@driver.driverServiceType'
                        },
                        </text>
                    }
                ];

                // Get vehicles from repository
                const repoVehicles = [
                    @foreach (var vehicle in HomeworkAssignment1.Models.Repository.GetVehicles())
                    {
                        <text>
                        {
                            vehicleID: '@vehicle.vehicleID',
                            vehicleType: '@vehicle.vehicleType',
                            registration: '@vehicle.vehicleRegistration',
                            serviceType: '@vehicle.vehicleServiceType'
                        },
                        </text>
                    }
                ];

                // Get drivers from localStorage
                const localDrivers = [];
                for (let i = 0; i < localStorage.length; i++) {
                    const key = localStorage.key(i);
                    if (key.startsWith('driver_') && !key.includes('|')) {
                        const driverData = localStorage.getItem(key).split('|');
                        if (driverData.length === 4) {
                            localDrivers.push({
                                driverID: key.replace('driver_', ''),
                                firstName: driverData[0],
                                lastName: driverData[1],
                                phone: driverData[2],
                                serviceType: driverData[3]
                            });
                        }
                    }
                }

                // Get vehicles from localStorage
                const localVehicles = [];
                for (let i = 0; i < localStorage.length; i++) {
                    const key = localStorage.key(i);
                    if (key.startsWith('vehicle_') && !key.includes('|')) {
                        const vehicleData = localStorage.getItem(key).split('|');
                        if (vehicleData.length === 3) {
                            localVehicles.push({
                                vehicleID: key.replace('vehicle_', ''),
                                vehicleType: vehicleData[0],
                                registration: vehicleData[1],
                                serviceType: vehicleData[2]
                            });
                        }
                    }
                }

                // Combine repository and localStorage data
                const allDrivers = [...repoDrivers, ...localDrivers];
                const allVehicles = [...repoVehicles, ...localVehicles];

                // Try each service type until we find one with available drivers and vehicles
                let selectedService = null;
                let availableDrivers = [];
                let availableVehicles = [];

                // Shuffle service types to randomize selection
                const shuffledServices = [...serviceTypes].sort(() => 0.5 - Math.random());

                for (const service of shuffledServices) {
                    availableDrivers = allDrivers.filter(d => d.serviceType === service);
                    availableVehicles = allVehicles.filter(v => v.serviceType === service);

                    if (availableDrivers.length > 0 && availableVehicles.length > 0) {
                        selectedService = service;
                        break;
                    }
                }

                if (!selectedService) {
                    alert("No available drivers or vehicles for any service type");
                    return;
                }

                // Select random driver and vehicle
                const randomDriver = availableDrivers[Math.floor(Math.random() * availableDrivers.length)];
                const randomVehicle = availableVehicles[Math.floor(Math.random() * availableVehicles.length)];

                // Create booking key
                const bookingKey = 'emergency_' + Date.now();

                // Store booking data in localStorage
                localStorage.setItem(bookingKey + '_serviceType', selectedService);
                localStorage.setItem(bookingKey + '_id', 'EMG-' + Math.floor(Math.random() * 10000));
                localStorage.setItem(bookingKey + '_fullName', 'EMERGENCY PATIENT');
                localStorage.setItem(bookingKey + '_phone', '000-000-0000');
                localStorage.setItem(bookingKey + '_pickUpTime', new Date().toLocaleTimeString());
                localStorage.setItem(bookingKey + '_reason', 'Emergency');
                localStorage.setItem(bookingKey + '_address', 'Emergency Location');
                localStorage.setItem(bookingKey + '_date', new Date().toISOString());
                localStorage.setItem(bookingKey + '_isEmergency', 'true');
                localStorage.setItem(bookingKey + '_driverId', randomDriver.driverID);
                localStorage.setItem(bookingKey + '_vehicleId', randomVehicle.vehicleID);

                // Store driver details
                localStorage.setItem(bookingKey + '_driverFirstName', randomDriver.firstName);
                localStorage.setItem(bookingKey + '_driverLastName', randomDriver.lastName);
                localStorage.setItem(bookingKey + '_driverPhone', randomDriver.phone);
                localStorage.setItem(bookingKey + '_driverService', randomDriver.serviceType);

                // Store vehicle details
                localStorage.setItem(bookingKey + '_vehicleType', randomVehicle.vehicleType);
                localStorage.setItem(bookingKey + '_vehicleReg', randomVehicle.registration);
                localStorage.setItem(bookingKey + '_vehicleService', randomVehicle.serviceType);

                // Add to bookings list
                let bookings = localStorage.getItem('bookingKeys') || '';
                if (bookings) bookings += ',';
                bookings += bookingKey;
                localStorage.setItem('bookingKeys', bookings);

                // Set as current booking
                localStorage.setItem('currentBookingKey', bookingKey);

                // Redirect to emergency booking action
                window.location.href = '@Url.Action("ConfirmBooking", "Booking")?serviceType=' +
                    encodeURIComponent(selectedService) +
                    '&driverId=' + encodeURIComponent(randomDriver.driverID) +
                    '&vehicleId=' + encodeURIComponent(randomVehicle.vehicleID);
            });
        });
    </script>
}