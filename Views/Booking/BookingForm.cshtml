@model HomeworkAssignment1.Models.DriverVehicleModel

@{
    ViewBag.Title = "Booking Form";
    var serviceType = ViewBag.ServiceType as string;
}

<h2>@serviceType</h2>

<form id="bookingForm">
    <input type="hidden" id="serviceType" value="@serviceType" />
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label for="fullName">Full Name*</label>
                <input type="text" class="form-control" id="fullName" required>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label for="phone">Phone*</label>
                <input type="tel" class="form-control" id="phone" required>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label for="pickUpTime">Pick-Up Time*</label>
                <input type="time" class="form-control" id="pickUpTime" required>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label for="reason">Reason*</label>
                <input type="text" class="form-control" id="reason" required>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label for="vehicle">Vehicle*</label>
                <select class="form-control" id="vehicle" required>
                    <option value="">Select Vehicle</option>
                </select>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label for="driver">Driver*</label>
                <select class="form-control" id="driver" required>
                    <option value="">Select Driver</option>
                </select>
            </div>
        </div>
    </div>

    <div class="form-group">
        <label for="pickUpAddress">Pick-Up Address</label>
        <textarea class="form-control" id="pickUpAddress" rows="3"></textarea>
    </div>

    <button type="submit" class="btn btn-primary">BOOK AMBULANCE</button>
</form>

@section scripts {
    <script>
        $(document).ready(function () {
            const serviceType = $('#serviceType').val();

            // Get repository data
            const repoDrivers = [
                @foreach (var driver in Model.Drivers)
                {
                    <text>
                    {
                        driverID: '@driver.driverID',
                        firstName: '@driver.driverFirstName',
                        lastName: '@driver.driverLastName',
                        phone: '@driver.driverPhoneNumber',
                        serviceType: '@driver.driverServiceType'
                    },
                    </text>
                }
            ];

            const repoVehicles = [
                @foreach (var vehicle in Model.Vehicles)
                {
                    <text>
                    {
                        vehicleID: '@vehicle.vehicleID',
                        vehicleType: '@vehicle.vehicleType',
                        registration: '@vehicle.vehicleRegistration',
                        serviceType: '@vehicle.vehicleServiceType'
                    },
                    </text>
                }
            ];

            // Get localStorage data
            const localDrivers = [];
            const localVehicles = [];

            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);

                // Handle drivers
                if (key.startsWith('driver_') && !key.includes('|')) {
                    const driverData = localStorage.getItem(key).split('|');
                    if (driverData.length === 4 && driverData[3] === serviceType) {
                        localDrivers.push({
                            driverID: key.replace('driver_', ''),
                            firstName: driverData[0],
                            lastName: driverData[1],
                            phone: driverData[2],
                            serviceType: driverData[3]
                        });
                    }
                }

                // Handle vehicles
                if (key.startsWith('vehicle_') && !key.includes('|')) {
                    const vehicleData = localStorage.getItem(key).split('|');
                    if (vehicleData.length === 3 && vehicleData[2] === serviceType) {
                        localVehicles.push({
                            vehicleID: key.replace('vehicle_', ''),
                            vehicleType: vehicleData[0],
                            registration: vehicleData[1],
                            serviceType: vehicleData[2]
                        });
                    }
                }
            }

            // Combine sources
            const allDrivers = [...repoDrivers, ...localDrivers];
            const allVehicles = [...repoVehicles, ...localVehicles];

            // Populate dropdowns
            const $driverSelect = $('#driver');
            allDrivers.forEach(driver => {
                $driverSelect.append(
                    $('<option></option>')
                        .val(driver.driverID)
                        .text(driver.firstName + ' ' + driver.lastName)
                );
            });

            const $vehicleSelect = $('#vehicle');
            allVehicles.forEach(vehicle => {
                $vehicleSelect.append(
                    $('<option></option>')
                        .val(vehicle.vehicleID)
                        .text(vehicle.vehicleType + ' (' + vehicle.registration + ')')
                );
            });

            // Form submission
            $('#bookingForm').submit(function(e) {
                e.preventDefault();

                // Find selected items
                const selectedDriverId = $('#driver').val();
                const selectedDriver = allDrivers.find(d => d.driverID === selectedDriverId);
                const selectedVehicleId = $('#vehicle').val();
                const selectedVehicle = allVehicles.find(v => v.vehicleID === selectedVehicleId);

                if (!selectedDriver || !selectedVehicle) {
                    alert('Please select both a driver and vehicle');
                    return;
                }

                // Create booking key
                const bookingKey = 'booking_' + Date.now();

                // Store booking data
                localStorage.setItem(bookingKey + '_serviceType', serviceType);
                localStorage.setItem(bookingKey + '_id', generateGUID());
                localStorage.setItem(bookingKey + '_fullName', $('#fullName').val());
                localStorage.setItem(bookingKey + '_phone', $('#phone').val());
                localStorage.setItem(bookingKey + '_pickUpTime', $('#pickUpTime').val());
                localStorage.setItem(bookingKey + '_reason', $('#reason').val());
                localStorage.setItem(bookingKey + '_address', $('#pickUpAddress').val());
                localStorage.setItem(bookingKey + '_date', new Date().toISOString());
                localStorage.setItem(bookingKey + '_isEmergency', 'false');
                localStorage.setItem(bookingKey + '_driverId', selectedDriverId);
                localStorage.setItem(bookingKey + '_vehicleId', selectedVehicleId);

                // Store driver details
                localStorage.setItem(bookingKey + '_driverFirstName', selectedDriver.firstName);
                localStorage.setItem(bookingKey + '_driverLastName', selectedDriver.lastName);
                localStorage.setItem(bookingKey + '_driverPhone', selectedDriver.phone);
                localStorage.setItem(bookingKey + '_driverService', selectedDriver.serviceType);

                // Store vehicle details
                localStorage.setItem(bookingKey + '_vehicleType', selectedVehicle.vehicleType);
                localStorage.setItem(bookingKey + '_vehicleReg', selectedVehicle.registration);
                localStorage.setItem(bookingKey + '_vehicleService', selectedVehicle.serviceType);

                // Update bookings list
                let bookings = localStorage.getItem('bookingKeys') || '';
                if (bookings) bookings += ',';
                localStorage.setItem('bookingKeys', bookings + bookingKey);
                localStorage.setItem('currentBookingKey', bookingKey);

                // Redirect to confirmation
                window.location.href = '@Url.Action("ConfirmBooking", "Booking")';
            });

            function generateGUID() {
                return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                    const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
                    return v.toString(16);
                });
            }
        });
    </script>
}